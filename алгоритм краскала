class Graph:
    def __init__(self, vertex):
        self.vertex = vertex
        self.graph = []

    def add_edge(self, a, b, c):
        self.graph.append([a, b, c])

    def search(self, parent, i):
        if parent[i] == i:
            return i
        return self.search(parent, parent[i])

    def apply_union(self, parent, rank, x, y):
        x_root = self.search(parent, x)
        y_root = self.search(parent, y)
        if rank[x_root] < rank[y_root]:
            parent[x_root] = y_root
        elif rank[x_root] > rank[y_root]:
            parent[y_root] = x_root
        else:
            parent[y_root] = x_root
            rank[x_root] += 1

    def kruskal(self):
        result = []
        i, j = 0, 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []
        for node in range(self.vertex):
            parent.append(node)
            rank.append(0)
        while j < self.vertex - 1:
            a, b, c = self.graph[i]
            i = i + 1
            x = self.search(parent, a)
            y = self.search(parent, b)
            if x != y:
                j = j + 1
                result.append([a, b, c])
                self.apply_union(parent, rank, x, y)
        for u, v, weight in result:
            print("Edge:", a, b, end=" ")
            print("-", weight)


g = Graph(5)
g.add_edge(0, 1, 8)
g.add_edge(0, 2, 5)
g.add_edge(1, 2, 9)
g.add_edge(1, 3, 11)
g.add_edge(2, 3, 15)
g.add_edge(2, 4, 10)
g.add_edge(3, 4, 7)
g.kruskal()
